---
layout: post
title:  "Deque"
date:   2020-07-16 22:55
categories: ["barkingDog"]
author: "J-Shine"
---

# 바킹독님의 실전알고리즘배우기 7강듣고 요약
[바킹독의 실전 알고리즘 7강 링크](https://blog.encrypted.gg/935)   
 
![image](https://user-images.githubusercontent.com/61873510/87678158-928ddc80-c7b5-11ea-9a26-ebbb2a25f194.png)<br>
![image](https://user-images.githubusercontent.com/61873510/87678204-a0dbf880-c7b5-11ea-9429-8737999b3d88.png)<br><br>
# 덱의 성질
![image](https://user-images.githubusercontent.com/61873510/87678451-ea2c4800-c7b5-11ea-8c54-f7ce5959b766.png)<br>
덱은 double-ended queue로, 큐인데 양끝에서 삽입과 삭제가 가능한 자료구조이다.<br>
양 끝의 원소 이외의 원소들은 원칙적으로 확인이 불가능하지만, STL deque에서는 가능하다.<br><br>

# 덱의 구현
```c++
#include <bits/stdc++.h>
using namespace std;

const int MX = 1000005;
int dat[2*MX+1];
int head = MX, tail = MX;

void push_front(int x){
  dat[--head] = x;
}

void push_back(int x){
  dat[tail++] = x;
}

void pop_front(){
  head++;
}

void pop_back(){
  tail--;
}

int front(){
  return dat[head];
}

int back(){
  return dat[tail-1];
}

void test(){
  push_back(30); // 30
  cout << front() << '\n'; // 30
  cout << back() << '\n'; // 30
  push_front(25); // 25 30
  push_back(12); // 25 30 12
  cout << back() << '\n'; // 12
  push_back(62); // 25 30 12 62
  pop_front(); // 30 12 62
  cout << front() << '\n'; // 30
  pop_front(); // 12 62
  cout << back() << '\n'; // 62
}

int main(void){
  test();
}
```
덱은 양쪽으로 확장이 가능하기 때문에 직접 구현할 땐 초기 시작점인 head와 tail을 MX로 두고, 배열의 크기를 2 * MX + 1로 잡는다.<br><br>

# STL deque
![image](https://user-images.githubusercontent.com/61873510/87679858-a5a1ac00-c7b7-11ea-81bc-4fd141fd4213.png)<br>
STL deque는 push_front(), push_back(), pop_front(), pop_back(), front(), back() 등 deque의 기본적인 함수 뿐만 아니라<br>
insert(), erase(), at(), [](operater), iterater(begin(), end())까지 vector에서 지원하는 연산을 다 지원한다.<br>
그렇다고 vector보다 deque가 더 좋은 것은 아니고, 처음, 중간에서 삽입과 삭제가 빈번할 땐 deque를 사용, 끝에서 추가 삭제가 빈번할 땐 vector가 좋다.<br>
또한 둘은 메모리 배치가 다르다. vector는 원소들이 메모리 상에 연속적으로 배치되어있고, deque는 분산되어있다<br><br>
[출처](https://www.geeksforgeeks.org/deque-vs-vector-in-c-stl/)<br>
[출처](http://www.cplusplus.com/reference/deque/deque/)<br><br>

# 연습문제
[BOJ 10866번](https://j-shine.github.io//baekjoon-algorithm/2020/07/17/baekjoon-10866.html)<br><br>

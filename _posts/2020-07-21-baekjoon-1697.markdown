---
layout: post
title:  "[백준 1697번] 숨바꼭질"
date:   2020-07-21 23:30
categories: ["baekjoon-algorithm"]
author: "J-Shine"
---
# \[백준 1679번] 숨바꼭질 C++ 풀이
# 시간 제한
2초<br><br>

# 메모리 제한
128MB<br><br>

# 문제  
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다.<br>
만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.<br>
수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.<br><br>

# 입력  
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.<br><br>

# 출력  
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.<br><br>

# 내 풀이

```c++
#include<bits/stdc++.h>
using namespace std;
int subin[100001];
int N, K;
queue<int> q;
int dx[2] = { -1, 1 };

int main() {
	cin >> N >> K;
	if (N == K) {
		cout << 0 << '\n';
		return 0;
	}
	for (int i = 0; i < 100001; i++) {
		subin[i] = -1;
	}
	subin[N] = 0;
	q.push(N);
	while (!q.empty()) {
		int cur = q.front();
		q.pop();
		for (int i = 0; i < 3; i++) {
			int nx;
			if (i < 2) {
				nx = cur + dx[i];
			}
			else
				nx = cur * 2;
			if (nx < 0 || nx > 100000) continue;
			if (subin[nx] != -1) continue;
			subin[nx] = subin[cur] + 1;
			q.push(nx);
			if (nx == K) {
				cout << subin[nx] << "\n";
				return 0;
			}
		}
	}
}
```
기존의 2차원 BFS에서 상, 하, 좌, 우로 퍼져나가던 것을 앞, 뒤, 2배 이렇게 3가지로 바꿔서 구현하면 된다.<br>
또한 수빈이가 0에서 100000 사이에서만 움직인다는 조건이 없으므로, 수빈이가 그 범위를 나갔다가 다시 들어올 경우도 생각해봐야 한다.<br>
이 문제에서는 *2만 있고 /2는 없으므로 *2를 해서 100000을 벗어나면 -1을 해서 다시 돌아와야 하기 때문에 매우 비효율적이다.<br>
따라서 100000을 넘어가는 순간 비효율적인 무빙이 되기 때문에 100000은 벗어나지 않는다고 생각해도 된다.<br>
반대로 0보다 작은 경우가 되려면 반드시 -를 반복해서 가야하고,  음수에 2배를 하면 더 멀리 떨어져버리기 때문에 +만을 반복해서 다시 돌아와야 하는데, <br>
이 역시 매우 비효율적이므로 0도 벗어나지 않는다고 생각해도 무방하다.<


---
layout: post
title:  "[백준 1406번] 에디터"
date:   2020-07-13 18:25
categories: ["baekjoon-algorithm"]
author: "J-Shine"
---
# \[백준 1406번] 에디터 C++ 풀이
# 문제  
한 줄로 된 간단한 에디터를 구현하려고 한다. 이 편집기는 영어 소문자만을 기록할 수 있는 편집기로, 최대 600,000글자까지 입력할 수 있다.<br>
이 편집기에는 '커서'라는 것이 있는데, 커서는 문장의 맨 앞(첫 번째 문자의 왼쪽), 문장의 맨 뒤(마지막 문자의 오른쪽), 또는 문장 중간 임의의 곳(모든 연속된 두 문자 사이)에 위치할 수 있다. 즉 길이가 L인 문자열이 현재 편집기에 입력되어 있으면, 커서가 위치할 수 있는 곳은 L+1가지 경우가 있다.<br>
이 편집기가 지원하는 명령어는 다음과 같다.<br>
L: 커서를 왼쪽으로 한 칸 옮김 (커서가 문장의 맨 앞이면 무시됨)<br>
D: 커서를 오른쪽으로 한 칸 옮김 (커서가 문장의 맨 뒤이면 무시됨)<br>
B: 커서 왼쪽에 있는 문자를 삭제함 (커서가 문장의 맨 앞이면 무시됨) 삭제로 인해 커서는 한 칸 왼쪽으로 이동한 것처럼 나타나지만, 실제로 커서의 오른쪽에 있던 문자는 그대로임<br>
P $: $라는 문자를 커서 왼쪽에 추가함<br><br>

# 입력  

첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다. 이 문자열은 길이가 N이고, 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다.<br> 
둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 M(1 ≤ M ≤ 500,000)이 주어진다. 셋째 줄부터 M개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다.<br>
명령어는 위의 네 가지 중 하나의 형태로만 주어진다.<br><br>

# 출력  

첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.<br>

# 내 풀이

```c++
#include <bits/stdc++.h>
using namespace std;

void L(list<char>::iterator& cursorIdx, list<char>& alphabets) {
	if(cursorIdx != alphabets.begin()) cursorIdx--;
}
void D(list<char>::iterator& cursorIdx, list<char>& alphabets) {
	if(cursorIdx != alphabets.end()) cursorIdx++;
}
void B(list<char>::iterator& cursorIdx, list<char>& alphabets) {
	if (cursorIdx != alphabets.begin()) {
		cursorIdx--;
		cursorIdx = alphabets.erase(cursorIdx);
	}
}
void P(list<char>::iterator& cursorIdx, list<char>& alphabets, char c) {
	cursorIdx = alphabets.insert(cursorIdx, c);
	cursorIdx++;
}

int main() {
    ios_base::sync_with_stdio(0);
	cin.tie(0);
	// cursor가 iterator의 왼쪽에 있다고 간주함
	int len(0), M(0);
	string s;
	char c, command;
	list<char> alphabets;
	list<char>::iterator cursorIdx = alphabets.begin();
	cin >> s;
	for (auto e : s) {
		alphabets.push_back(e);
	}
	cin >> M;
	for (int i = 0; i < M; i++) {
		cin >> command;
		if (command == 'P') {
			cin >> c;
			P(cursorIdx, alphabets, c);
		}
		else if (command == 'L') {
			L(cursorIdx, alphabets); 	
		}
		else if (command == 'D') {
			D(cursorIdx, alphabets);
		}
		else if (command == 'B') {
			B(cursorIdx, alphabets);
		}
	}
	for (auto e : alphabets) {
		cout << e;
	}
}
```
STL list를 사용하여 풀었는데 iterator 사용법이 잘 기억이 안나서 애를 먹었다.<br>
또한 iterator의 특성상 커서가 iterator의 왼쪽에 있다고 생각해야 알맞게 돌아가는 것 같다.
iterator에 관한 자세한 내용은 [여기로](https://j-shine.github.io//c++/2020/07/13/iterator.html)<br><br>

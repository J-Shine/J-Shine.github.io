---
layout: post
title:  "[1158번] 요세푸스 문제"
date:   2020-07-13 19:00
categories: ["baekjoon-algorithm"]
author: "J-Shine"
---
# 시간 제한
2초<br><br>

# 메모리 제한
256MB<br><br>

# 문제  
요세푸스 문제는 다음과 같다.<br>
1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.<br>
N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.<br><br>

# 입력  
첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 5,000)<br><br>

# 출력  
예제와 같이 요세푸스 순열을 출력한다.<br><br>

# 예제 입력
7 3<br><br>

# 예제 출력
<3, 6, 2, 7, 5, 1, 4><br><br>

# 내 풀이

```c++
#include <bits/stdc++.h>
using namespace std;

list<int> li;
list<int>::iterator iter;
int N, K;
int main() {
    ios_base::sync_with_stdio(0);
	cin.tie(0);	
    cin >> N;
	for (int i = 0; i < N; i++) {
		li.push_back(i+1);
	}
	iter = li.begin();
	cin >> K;
	cout << '<';
	for (int i = 0; i < N; i++) {
		for(int i = 0; i < K; i++) {
			iter++;
			if (iter == li.end()) iter = li.begin();
		}
		if(iter != li.begin()) iter--;
		else {
			iter = li.end();
			iter--;
		}
		cout << *iter;
		if (i < N - 1) cout << ", ";
		iter = li.erase(iter);
		if (iter == li.end()) iter = li.begin();
	}
	cout << '>';
}
```
나는 STL list를 사용하여 풀었는데 list가 원형연결리스트가 아닌 이중연결리스트이다 보니 조금 더 코드가 복잡해졌다.(if문이 많아졌다)<br>
또한 매번 iterator를 3번 증가시켰다가 다시 한번 감소시키는 뻘짓을 했다.<br>
그런데 문제를 풀고 구글링을 해보니 아래 코드를 추가하여 이중연결리스트를 간단하게 원형리스트로 바꿀 수 있다!<br>
```c++
list<int>::iterator circularNext(list<int> &li, list<int>::iterator &iter)
{
	return std::next(iter) == li.end() ? li.begin() : std::next(iter);
}
```

이 코드를 추가하고 다시 수정한 코드(더 깔끔하고 잘 돌아간다)<br>
```c++
#include <bits/stdc++.h>
using namespace std;

void circularNext(list<int> &li, list<int>::iterator &iter)
{
	iter =  std::next(iter) == li.end() ? li.begin() : std::next(iter);
}
list<int> li;
list<int>::iterator iter;
int N, K;
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cin >> N;
	for (int i = 0; i < N; i++) {
		li.push_back(i + 1);
	}
	iter = li.begin();
	cin >> K;
	cout << '<';
	for (int i = 0; i < N; i++) {
		for (int i = 0; i < K-1; i++) {
			circularNext(li, iter);
		}
		cout << *iter;
		if (i < N - 1) cout << ", ";
		iter = li.erase(iter);
		if (iter == li.end()) iter = li.begin();
	}
	cout << '>';
}
```
그런데 오히려 조금 더 코드가 느려졌는데 함수를 새로 추가해서 그런듯하다.<br><br>

그리고 다른 사람들 풀이를 보니 STL queue를 이용해서 더 깔끔하게 푼 사람이 더 많았다.<br>
그래서 queue로도 다시 풀어보았다.<br><br>

# STL queue를 이용한 내 풀이

```c++
#include <bits/stdc++.h>
using namespace std;

queue<int> q;
int N, K;
int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> N;
	for (int i = 0; i < N; i++) {
		q.push(i + 1);
	}
	cin >> K;
	cout << '<';
	while (q.empty() != true) {
		for (int i = 0; i < K - 1; i++) {
			q.push(q.front());
			q.pop();
		}
		cout << q.front();
		q.pop();
		if (q.empty()) {
			cout << '>';
			return 0;
		}
		cout << ", ";
	}
}
```
이 문제는 큐를 이용한게 더 짧고 더 빠르다.<br><br>

---
layout: post
title:  "[4949번] 균형잡힌 세상"
date:   2020-07-18 22:05
categories: ["baekjoon-algorithm"]
author: "J-Shine"
---
# 시간 제한
1초<br><br>

# 메모리 제한
128MB<br><br>

# 문제  
세계는 균형이 잘 잡혀있어야 한다. 양과 음, 빛과 어둠 그리고 왼쪽 괄호와 오른쪽 괄호처럼 말이다.<br>
정민이의 임무는 어떤 문자열이 주어졌을 때, 괄호들의 균형이 잘 맞춰져 있는지 판단하는 프로그램을 짜는 것이다.<br>
문자열에 포함되는 괄호는 소괄호("()") 와 대괄호("[]")로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.<br><br>
모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.<br>
모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.<br>
모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.<br>
모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.<br>
짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.<br><br>
정민이를 도와 문자열이 주어졌을 때 균형잡힌 문자열인지 아닌지를 판단해보자.<br><br>

# 입력  
하나 또는 여러줄에 걸쳐서 문자열이 주어진다. 각 문자열은 영문 알파벳, 공백, 소괄호("( )") 대괄호("[ ]")등으로 이루어져 있으며, 길이는 100글자보다 작거나 같다.
**입력의 종료조건으로 맨 마지막에 점 하나(".")가 들어온다.**<br><br>
# 출력  

각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes"를, 아니면 "no"를 출력한다.<br><br>

# 내 풀이

```c++
#include<bits/stdc++.h>
using namespace std;

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	string s;
	
	while (getline(cin, s) && s != ".") {
		stack<char> stk;
		char c = '+';
		for (auto e : s) {
			if (e == '(' || e == '[') stk.push(e);
			else if (e == ')') {
				if (stk.empty() || stk.top() != '(') { // Short-circuit evaluation
					c = '-';
					break;
				}
				else if (stk.top() == '(') stk.pop();
			}
			else if (e == ']') {
				if (stk.empty() || stk.top() != '[') {
					c = '-';
					break;
				}
				else if (stk.top() == '[') stk.pop();
			}
		}
		if (!stk.empty() || c == '-') {
			cout << "no\n";
		}
		else
			cout << "yes\n";
	}
}
```
문장을 받을 땐 getline()으로 받으면 편하다.<br>
stk.top()을 확인하기 전 stk.empty() 조건을 걸어서 runtime error가 발생하지 않는다.(사실 짤때는 거기까지 생각 안했는데 얻어걸렸다..ㅎ)<br>
종료조건으로 "."이 들어온다는 것을 안 보고 그냥 풀어서 한 번 틀렸다.<br><br>

# 바킹독님 풀이
```c++
#include <bits/stdc++.h>
using namespace std;

int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  while(true){
    string a;
    getline(cin, a);
    if(a == ".") break;
    stack<char> s;
    bool isValid = true;
    for(auto c : a){
      if(c == '(' || c == '[') s.push(c);
      else if(c == ')'){
        if(s.empty() || s.top() != '('){
          isValid = false;
          break;
        }
        s.pop();
      }
      else if(c == ']'){
        if(s.empty() || s.top() != '['){
          isValid = false;
          break;
        }
        s.pop();
      }
    }
    if(!s.empty()) isValid = false;
    if(isValid) cout << "yes\n";
    else cout << "no\n";
  }
}
```
바킹독님 풀이가 내가 푼 풀이랑 매우 흡사해서 기부니가 좋았따ㅎㅅㅎ<br>
차이점으로는 균형을 이루었는지 체크하는 변수를 나는 char 변수로 했지만 바킹독님은 boolean으로 했다는 것..?<br>
그리고 예전에 수업시간에 break는 잘 쓰면 안된다고 들었던 것 같은데 찾아보니 그런말도 없고 이 분도 쓰셔서 나도 그냥 써야겠다.
그리고 if문의 조건이 여러개일 때 그 중 앞의 것에서 결론이 나면 뒤의 조건들은 확인하지 않는 것을 전문용어로 Short-circuit evaluation이라 한다.<br><br>

---
layout: post
title:  "[7569번] 토마토"
date:   2020-07-21 21:40
categories: ["baekjoon-algorithm"]
author: "J-Shine"
---
# 시간 제한
1초<br><br>

# 메모리 제한
256MB<br><br>

# 문제  
철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다.<br>
창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 위, 아래, 왼쪽, 오른쪽, 앞, 뒤 여섯 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다.<br> 
철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지, 그 최소 일수를 알고 싶어 한다.<br>
토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.<br><br>

# 입력  
첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다.<br>
둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다. 각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다. <br>
정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 이러한 N개의 줄이 H번 반복하여 주어진다.<br><br>

# 출력  
여러분은 토마토가 모두 익을 때까지의 최소 날짜를 출력해야 한다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.<br><br>

# 내 풀이

```c++
#include<bits/stdc++.h>
using namespace std;
int rippened[105][105][105];
int days[105][105][105];
int N(0), M(0), H(0), minDays(0);
queue<tuple<int, int, int>> q;
tuple<int, int, int> t;
int dx[6] = { 1, 0, -1, 0, 0, 0 };
int dy[6] = { 0, 1, 0, -1, 0, 0 };
int dz[6] = { 0, 0, 0, 0, 1, -1 };

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	cin >> M >> N >> H; //   z축은 H, x축은 N, y축은 M,

	for (int i = 0; i < H; i++) {
		for (int j = 0; j < N; j++) {
			for (int h = 0; h < M; h++) {
				days[i][j][h] = -1; // days를 -1로 초기화
			}
		}
	}


	for (int i = 0; i < H; i++) {
		for (int j = 0; j < N; j++) {
			for (int h = 0; h < M; h++) {
				cin >> rippened[i][j][h];
				if (rippened[i][j][h] == 1) {
					q.push(make_tuple(i, j, h)); // 토마토 정보를 입력받으면서 익은 토마토는 큐에 넣는다.
					days[i][j][h] = 0;
				}
			}
		}
	}

	while (!q.empty()) {
		tuple<int, int, int> cur = q.front();
		q.pop();
		for (int dir = 0; dir < 6; dir++) {
			int nz = get<0>(cur) + dz[dir]; // x y z와 i j h를 잘 매칭해야 한다. 둘이 일치하지 않고, 방향이 헷갈리므로 주의하자.
			int nx = get<1>(cur) + dx[dir];
			int ny = get<2>(cur) + dy[dir];
			if (nx < 0 || nx >= N || ny < 0 || ny >= M || nz < 0 || nz >= H) continue;
			if (rippened[nz][nx][ny] != 0 || days[nz][nx][ny] != -1) continue;
			rippened[nz][nx][ny] = 1;
			days[nz][nx][ny] = days[get<0>(cur)][get<1>(cur)][get<2>(cur)] + 1;
			if (minDays < days[nz][nx][ny]) minDays = days[nz][nx][ny];
			q.push({ nz, nx, ny });
		}
	}
	for (int i = 0; i < H; i++) {
		for (int j = 0; j < N; j++) {
			for (int h = 0; h < M; h++) {
				if (rippened[i][j][h] == 0) {
					cout << -1 << '\n';
					return 0;
				}
			}
		}
	}
	cout << minDays << '\n';
}

```
앞의 7576번 토마토 문제와 같은데 2차원이 아니라 3차원이다.<br>
nx ny nz를 만들 때 i j h와 x y z를 잘 매칭해야 한다. 처음에 잘못 매칭했다가 BFS가 이상한 방향으로 흘러갔었다.<br><br>

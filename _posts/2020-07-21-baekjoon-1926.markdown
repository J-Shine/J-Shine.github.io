---
layout: post
title:  "[1926번] 그림"
date:   2020-07-21 17:00
categories: ["baekjoon-algorithm"]
author: "J-Shine"
---
# 시간 제한
2초<br><br>

# 메모리 제한
128MB<br><br>

# 문제  
어떤 큰 도화지에 그림이 그려져 있을 때, 그 그림의 개수와, 그 그림 중 넓이가 가장 넓은 것의 넓이를 출력하여라.<br>
단, 그림이라는 것은 1로 연결된 것을 한 그림이라고 정의하자. 가로나 세로로 연결된 것은 연결이 된 것이고 대각선으로 연결이 된 것은 떨어진 그림이다. 그림의 넓이란 그림에 포함된 1의 개수이다.<br><br>

# 입력  
첫째 줄에 도화지의 세로 크기 n(1 ≤ n ≤ 500)과 가로 크기 m(1 ≤ m ≤ 500)이 차례로 주어진다. <br>
두 번째 줄부터 n+1 줄 까지 그림의 정보가 주어진다. (단 그림의 정보는 0과 1이 공백을 두고 주어지며, 0은 색칠이 안된 부분, 1은 색칠이 된 부분을 의미한다)<br><br>

# 출력  

첫째 줄에는 그림의 개수, 둘째 줄에는 그 중 가장 넓은 그림의 넓이를 출력하여라. 단, 그림이 하나도 없는 경우에는 가장 넓은 그림의 넓이는 0이다.<br><br>

# 내 풀이

```c++
#include<bits/stdc++.h>
using namespace std;
#define X first;
#define Y second;
int board[505][505] = { 0 };
int vis[505][505] = { 0 };
int n(0), m(0);
int dx[4] = { 1, 0, -1, 0 }; // x축이 행
int dy[4] = { 0, 1, 0, -1 }; // y축이 열
int maxArea(0), numberOfDrawing(0);

int main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	queue<pair<int, int>> Q;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> board[i][j];
		}
	}
	
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (!vis[i][j] && board[i][j]) {
				int area = 0;
				vis[i][j] = 1;
				area++;
				Q.push({ i, j });
				while (!Q.empty()) {
					pair<int, int> cur = Q.front();
					Q.pop();
					for (int dir = 0; dir < 4; dir++) {
						int nx = cur.X;
						nx += dx[dir];
						int ny = cur.Y;
						ny += dy[dir];
						if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
						if (vis[nx][ny] || board[nx][ny] != 1) continue;
						Q.push({ nx, ny });
						vis[nx][ny] = 1;
						area++;
					}
				}
				if (maxArea < area) maxArea = area;
				if (area) numberOfDrawing++;
			}
		}
	}
	cout << numberOfDrawing << "\n" << maxArea << "\n";
}
```
이중for문으로 시작점(파란 칸인데 안간 곳)을 체크하면서 BFS를 돌린다.<br>
처음에 어떻게 해야 모든 파란 칸의 넓이와 개수를 셀까 생각할 때 남은 시작점을 찾기 위해 이중 for문을 쓰는 건 조금 복잡하다? 라는 생각이 들었는데<br>
이중for문의 시간복잡도를 계산해보니 O(MN)으로 500 * 500 = 25만 밖에 안되어서 우려를 하지 않아도 될 것 같았다.<br><br>

# 바킹독님 풀이([출처](http://boj.kr/2edfa3c97260480d81e3133d389c119f))

```c++
#include <bits/stdc++.h>
using namespace std;
#define X first
#define Y second // pair에서 first, second를 줄여서 쓰기 위해서 사용
int board[502][502]; // 1이 파란 칸, 0이 빨간 칸에 대응
bool vis[502][502]; // 해당 칸을 방문했는지 여부를 저장
int n,m;
int dx[4] = {1,0,-1,0};
int dy[4] = {0,1,0,-1}; // 상하좌우 네 방향을 의미
int main(void){
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> m;
  for(int i = 0; i < n; i++)
    for(int j = 0; j < m; j++)
      cin >> board[i][j];
  int mx = 0; // 그림의 최댓값
  int num = 0; // 그림의 수
  for(int i = 0; i < n; i++){
    for(int j = 0; j < m; j++){ // (i, j)를 시작점으로 하고 싶은 상황
      if(board[i][j] == 0 or vis[i][j]) continue; // 해당 칸이 색칠이 안된 부분(0)이거나 이미 (i, j)를 방문했을 경우 넘어감
      // (i,j)는 새로운 그림에 속해있는 시작점
      num++; // 그림의 수 1 증가
      queue<pair<int,int> > Q;
      vis[i][j] = 1; // (i,j)로 BFS를 시작하기 위한 준비
      Q.push({i,j});
      int area = 0; // 그림의 넓이
      while(!Q.empty()){
        area++; // 큐에 들어있는 원소를 하나 뺄 때 마다 넓이를 1 증가시킴
        auto cur = Q.front(); Q.pop();
        for(int dir = 0; dir < 4; dir++){ // 상하좌우 칸을 살펴볼 것이다.
          int nx = cur.X + dx[dir];
          int ny = cur.Y + dy[dir]; // nx, ny에 dir에서 정한 방향의 인접한 칸의 좌표가 들어감
          if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue; // 범위 밖일 경우 넘어감
          if(vis[nx][ny] || board[nx][ny] != 1) continue; // 이미 방문한 칸이거나 파란 칸이 아닐 경우
          vis[nx][ny] = 1; // (nx, ny)를 방문했다고 명시
          Q.push({nx,ny});
        }
      }
      // (i, j)를 시작점으로 하는 BFS가 종료됨
      mx = max(mx, area); // area가 mx보다 클 경우 mx에 area를 대입. max는 STL에 정의된 함수
    }
  }
  cout << num << '\n' << mx;
}
```
강의에서도 언급하신 것 처럼 파란 칸이 딱 한 번씩만 들어가기 때문에 시간복잡도는 O(MN)이다.

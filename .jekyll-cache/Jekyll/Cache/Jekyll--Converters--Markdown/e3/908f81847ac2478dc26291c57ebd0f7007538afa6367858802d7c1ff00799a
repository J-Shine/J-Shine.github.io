I"<h1 id="바킹독님의-실전알고리즘배우기-7강듣고-요약">바킹독님의 실전알고리즘배우기 7강듣고 요약</h1>
<p><a href="https://blog.encrypted.gg/935">바킹독의 실전 알고리즘 7강 링크</a></p>

<p><img src="https://user-images.githubusercontent.com/61873510/87678158-928ddc80-c7b5-11ea-9a26-ebbb2a25f194.png" alt="image" /><br />
<img src="https://user-images.githubusercontent.com/61873510/87678204-a0dbf880-c7b5-11ea-9429-8737999b3d88.png" alt="image" /><br /><br /></p>
<h1 id="덱의-성질">덱의 성질</h1>
<p><img src="https://user-images.githubusercontent.com/61873510/87678451-ea2c4800-c7b5-11ea-8c54-f7ce5959b766.png" alt="image" /><br />
덱은 double-ended queue로, 큐인데 양끝에서 삽입과 삭제가 가능한 자료구조이다.<br />
양 끝의 원소 이외의 원소들은 원칙적으로 확인이 불가능하지만, STL deque에서는 가능하다.<br /><br /></p>

<h1 id="덱의-구현">덱의 구현</h1>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">MX</span> <span class="o">=</span> <span class="mi">1000005</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dat</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">MX</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">MX</span><span class="p">,</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">MX</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">push_front</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
  <span class="n">dat</span><span class="p">[</span><span class="o">--</span><span class="n">head</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">push_back</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
  <span class="n">dat</span><span class="p">[</span><span class="n">tail</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pop_front</span><span class="p">(){</span>
  <span class="n">head</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pop_back</span><span class="p">(){</span>
  <span class="n">tail</span><span class="o">--</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">front</span><span class="p">(){</span>
  <span class="k">return</span> <span class="n">dat</span><span class="p">[</span><span class="n">head</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">back</span><span class="p">(){</span>
  <span class="k">return</span> <span class="n">dat</span><span class="p">[</span><span class="n">tail</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test</span><span class="p">(){</span>
  <span class="n">push_back</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span> <span class="c1">// 30</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">front</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// 30</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">back</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// 30</span>
  <span class="n">push_front</span><span class="p">(</span><span class="mi">25</span><span class="p">);</span> <span class="c1">// 25 30</span>
  <span class="n">push_back</span><span class="p">(</span><span class="mi">12</span><span class="p">);</span> <span class="c1">// 25 30 12</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">back</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// 12</span>
  <span class="n">push_back</span><span class="p">(</span><span class="mi">62</span><span class="p">);</span> <span class="c1">// 25 30 12 62</span>
  <span class="n">pop_front</span><span class="p">();</span> <span class="c1">// 30 12 62</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">front</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// 30</span>
  <span class="n">pop_front</span><span class="p">();</span> <span class="c1">// 12 62</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">back</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">'\n'</span><span class="p">;</span> <span class="c1">// 62</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
  <span class="n">test</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>
<p>덱은 양쪽으로 확장이 가능하기 때문에 직접 구현할 땐 초기 시작점인 head와 tail을 MX로 두고, 배열의 크기를 2 * MX + 1로 잡는다.<br /><br /></p>

<h1 id="stl-deque">STL deque</h1>
<p><img src="https://user-images.githubusercontent.com/61873510/87679858-a5a1ac00-c7b7-11ea-81bc-4fd141fd4213.png" alt="image" /><br />
STL deque는 push_front(), push_back(), pop_front(), pop_back(), front(), back() 등 deque의 기본적인 함수 뿐만 아니라<br />
insert(), erase(), at(), <a href="operater"></a>, iterater(begin(), end())까지 vector에서 지원하는 연산을 다 지원한다.<br />
그렇다고 vector보다 deque가 더 좋은 것은 아니고, 처음, 중간에서 삽입과 삭제가 빈번할 땐 deque를 사용, 끝에서 추가 삭제가 빈번할 땐 vector가 좋다.<br />
또한 둘은 메모리 배치가 다르다. vector는 원소들이 메모리 상에 연속적으로 배치되어있고, deque는 분산되어있다<br /><br />
<a href="https://www.geeksforgeeks.org/deque-vs-vector-in-c-stl/">출처</a><br />
<a href="http://www.cplusplus.com/reference/deque/deque/">출처</a><br /><br /></p>

<h1 id="연습문제">연습문제</h1>
<p><a href="https://j-shine.github.io//baekjoon-algorithm/2020/07/17/baekjoon-10866.html">BOJ 10866번</a><br /><br /></p>
:ET